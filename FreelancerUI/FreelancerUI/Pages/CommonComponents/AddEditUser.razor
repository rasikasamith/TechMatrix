@using FreelancerUI.Models
@using Microsoft.AspNetCore.Components.Forms

@inject NavigationManager navigationManager;


<style>
    .table-no-border td {
        border: none;
    }
</style>

<EditForm Model="userViewModel" OnValidSubmit="SaveUser" class="col-md-6">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <table class="table table-no-border">
        <tbody>
            <tr>
                <td>User Name</td>
                <td>
                    <InputText class="form-control" @bind-Value="userViewModel.UserName" />
                    <ValidationMessage For="(() => userViewModel.UserName)" />
                </td>
            </tr>
            <tr>
                <td>Email</td>
                <td>
                    <InputText class="form-control" @bind-Value="userViewModel.Email" />
                    <ValidationMessage For="(() => userViewModel.Email)" />
                </td>
            </tr>
            <tr>
                <td>Phone Number</td>
                <td>
                    <InputText class="form-control" @bind-Value="userViewModel.PhoneNumber" />
                    <ValidationMessage For="(() => userViewModel.PhoneNumber)" />
                </td>
            </tr>
            <tr>
                <td>Skill Set</td>
                <td>
                    <InputText class="form-control" @bind-Value="userViewModel.SkilSets" />
                    <ValidationMessage For="(() => userViewModel.SkilSets)" />
                </td>
            </tr>
            <tr>
                <td>Hobby</td>
                <td>
                    <InputText class="form-control" @bind-Value="userViewModel.Hobby" />
                    <ValidationMessage For="(() => userViewModel.Hobby)" />
                </td>
            </tr>
        </tbody>
    </table>

    <button type="submit" class="btn btn-warning">Save</button>
    <a href="/" class="btn btn btn-primary">Back</a>    
</EditForm>


@code {
	[Parameter]
	public UserViewModel userViewModel { get; set; } 

	[Parameter]
	public EventCallback<UserViewModel> SaveUserCallback { get; set; }

	private async Task SaveUser()
	{
		await SaveUserCallback.InvokeAsync(userViewModel);
	}
}